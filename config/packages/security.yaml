security:
    role_hierarchy:
        ROLE_USER: ROLE_USAGER
        ROLE_USER_PARTNER: ROLE_USER
        ROLE_ADMIN_PARTNER: ROLE_USER_PARTNER
        ROLE_ADMIN_TERRITORY: ROLE_ADMIN_PARTNER
        ROLE_ADMIN: ROLE_ADMIN_TERRITORY

    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        api:
            pattern: ^/api
            stateless: true
            provider: app_user_provider
            custom_authenticators:
                - App\Security\JsonLoginAuthenticator
                - App\Security\TokenAuthenticator
            login_throttling:
                max_attempts: 5 # '%env(int:FORMS_SUBMIT_LIMITER_LIMIT)%' doesnt work here: fails to cast str to int
                interval: '%env(FORMS_SUBMIT_LIMITER_INTERVAL)%'
        main:
            lazy: true
            stateless: false
            provider: app_user_provider
            custom_authenticator: App\Security\FormLoginAuthenticator
            two_factor:
                auth_form_path: 2fa_login
                check_path: 2fa_login_check
            login_throttling:
                max_attempts: 5 # '%env(int:FORMS_SUBMIT_LIMITER_LIMIT)%' doesnt work here: fails to cast str to int
                interval: '%env(FORMS_SUBMIT_LIMITER_INTERVAL)%'
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 2592000 # 30 days in seconds

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            #switch_user: {role: ROLE_ADMIN}

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # This makes the logout route accessible during two-factor authentication. Allows the user to
        # cancel two-factor authentication, if they need to.
        - { path: ^/logout, role: PUBLIC_ACCESS }
        # This ensures that the form can only be accessed when two-factor authentication is in progress.
        - { path: ^/2fa, role: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        # Other rules may follow here...
        - { path: ^/api/doc, roles: PUBLIC_ACCESS }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_API_USER }
        - { path: ^/bo, roles: ROLE_USER_PARTNER }


when@prod:
    security:
        firewalls:
            main:
                remember_me:
                    secure: true
                    httponly: true

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon

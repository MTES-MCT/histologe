{% extends 'back/base_bo.html.twig' %}

{% set static_picto_yes = '<p class="fr-badge fr-badge--success">Oui</p>' %}
{% set static_picto_no = '<p class="fr-badge fr-badge--error">Non</p>' %}

{% block content %}
    {% include '_partials/_modal_affectation.html.twig' %}
    {% include '_partials/_modal_dpe.html.twig' %}
    {% if signalement.statut is not same as constant('App\\Entity\\Signalement::STATUS_NEED_VALIDATION') and not isClosed and not isClosedForMe and ((isAffected and isAccepted)) or is_granted('ROLE_ADMIN_TERRITORY') %}
        {% include '_partials/_modal_cloture.html.twig' %}
    {% endif %}
    {% if canEditNDE %}
        {% include '_partials/_modal_edit_nde.html.twig' %}        
    {% endif %}
    {% if is_granted('SIGN_EDIT', signalement) %}
        {% include '_partials/_modal_upload_files.html.twig' %}
    {% endif %}
    {% if is_granted('ROLE_ADMIN') %}
        {% include '_partials/_modal_send_lien_suivi.html.twig' %}
    {% endif %}
    <section id="signalement-{{ signalement.id }}-content"
        class="fr-p-5v fr-background--white
            {{ (isClosedForMe and not is_granted('ROLE_ADMIN_TERRITORY'))
                or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_NEED_VALIDATION')
                or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_CLOSED')
                or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_REFUSED')
            ? 'signalement-invalid'
            : ''
            }}">

        {% include 'back/signalement/view/photos-album.html.twig' %}
        
        {% include 'back/signalement/view/header-old.html.twig' %}
        
        {% include 'back/signalement/view/tags.html.twig' %}
        
        {% include 'back/signalement/view/address-qualifications-old.html.twig' %}
        
        {% include 'back/signalement/view/user-declaration-old.html.twig' %}

        {% include 'back/signalement/view/photos-documents.html.twig' with {
            'zonetitle': "Photos et documents de la situation",
            'filesFilter': 'situation',
            'filesType': 'photo,document'
        } %}
    
        {% include 'back/signalement/view/information.html.twig' %}
        
        {% include 'back/signalement/view/nde.html.twig' %}
 
        {% include 'back/signalement/view/partners.html.twig' %}
        
        {% include 'back/signalement/view/suivis.html.twig' %}

        {% include 'back/signalement/view/visites/visites-list.html.twig' %}

        {% include 'back/signalement/view/photos-documents.html.twig' with {
            'zonetitle': "Documents liés à la procédure",
            'filesFilter': 'procedure',
            'filesType': 'photo,document'
        } %}
    </section>
{% endblock %}
{% block javascripts %}
    {{ encore_entry_script_tags('app') }}
    <script nonce="{{ app.request.attributes.get('csp_script_nonce') }}">
        tippy('.part-infos-hover', {
            content: (reference) => '<strong class="fr-ws-nowrap">' + reference.getAttribute('data-user') + '</strong>' + '<hr class="fr-pb-1v"><span class="fr-ws-nowrap">' + reference.getAttribute('data-mail') + '</span>',
            allowHTML: true,
            interactive: true,
            hideOnClick: true,
            theme: 'light-border',
            arrow: true,
            placement: "bottom",
            maxWidth: "100%"
        });
        tippy('#tags_select_tooltip_btn', {
            content: (reference) => {
                let template = document.querySelector('template#tags_tooltip_template');
                let newEl = document.importNode(template.content, true);
                newEl.querySelectorAll('[data-tag-add]').forEach(el => {
                    el.addEventListener('click', addTagEvent)
                });
                newEl.querySelector('form[name="new-tag-form"]')?.addEventListener('submit', (event) => {
                    event.preventDefault();
                    let form = event.target;
                    let data = new FormData(form);
                    fetch(form.getAttribute('action'), {
                        method: 'POST',
                        body: data
                    }).then(r => {
                        r.json().then(res => {
                            form.reset();
                            let container = document.querySelector(`#tags_inactive_container`);
                            let template = document.querySelector(`template#tag_template`).content;
                            let tag = template.querySelector('span:first-child').cloneNode(true);
                            tag.setAttribute('data-value', res.tag.id);
                            tag.innerHTML = res.tag.label + '&nbsp;&nbsp;';
                            let deleter = document.createElement('span');

                            deleter.classList.add('fr-fi-delete-line', 'fr-mt-2v', 'fr-text-label--red-marianne', 'fr-icon--sm')
                            deleter.addEventListener('click', persistRemoveTagEvent);
                            tag.appendChild(deleter);
                            tag.addEventListener('click', addTagEvent);
                            container.appendChild(tag);
                        });
                    }).catch(e => {
                    });
                });
                newEl?.querySelectorAll('span.tag--deleter')?.forEach(tagDeleter => {
                    tagDeleter.addEventListener('click', persistRemoveTagEvent);
                });
                return newEl;
            },
            trigger: 'click',
            hideOnClick: 'toggle',
            allowHTML: true,
            interactive: true,
            theme: 'light-border',
            placement: "left",
            maxWidth: "500px",
            arrow: false,
        })
        
        {% if isClosedForMe or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_CLOSED') %}
        document?.querySelector('#signalement-{{ signalement.id }}-content').querySelectorAll('button:not(.reopen,.reaffect,.img-box,.fr-accordion__btn),.fr-btn:not(.reopen,.reaffect,.img-box,.fr-fi-file-pdf-fill)').forEach(input => {
            input.remove()
        })
        {% endif %}
    </script>
{% endblock %}

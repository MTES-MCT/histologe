{% extends 'back/base_bo.html.twig' %}

{% set static_picto_yes = '<p class="fr-badge fr-badge--success">Oui</p>' %}
{% set static_picto_no = '<p class="fr-badge fr-badge--error">Non</p>' %}

{% block content %}
    {% include '_partials/_modal_affectation.html.twig' %}
    {% include '_partials/_modal_dpe.html.twig' %}
    {% if signalement.statut is not same as constant('App\\Entity\\Signalement::STATUS_NEED_VALIDATION') and not isClosed and not isClosedForMe and ((isAffected and isAccepted)) or is_granted('ROLE_ADMIN_TERRITORY') %}
        {% include '_partials/_modal_cloture.html.twig' %}
    {% endif %}
    {% if canEditNDE %}
        {% include '_partials/_modal_edit_nde.html.twig' %}        
    {% endif %}
    {% if is_granted('SIGN_EDIT', signalement) %}
        {% include '_partials/_modal_upload_files.html.twig' %}
    {% endif %}
    {% if is_granted('ROLE_ADMIN') %}
        {% include '_partials/_modal_send_lien_suivi.html.twig' %}
    {% endif %}
    {% include '_partials/_modal_file_delete.html.twig' %}
    {% include 'back/signalement/view/edit-modals/edit-file.html.twig' %}

    <div class="fr-background--white
            {{ (isClosedForMe and not is_granted('ROLE_ADMIN_TERRITORY'))
                or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_CLOSED')
                or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_REFUSED')
            ? 'signalement-invalid'
            : ''
            }}">
        <section id="signalement-{{ signalement.id }}-content"
            class="fr-p-5v">

            {% include 'back/signalement/view/photos-album.html.twig' %}
            
            {% include 'back/signalement/view/header.html.twig' %}
        </section>

        {% include 'back/signalement/view/tabs.html.twig' %}
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha256-whL0tQWoY1Ku1iskqPFvmZ+CHsvmRWx/PIoEvIeWh4I="
        crossorigin="anonymous"
    ></script>"
    <script src="https://cdn.jsdelivr.net/npm/tippy.js@6/dist/tippy.umd.min.js"
        integrity="sha256-qx7gQMlSzXvTJCl8PBcHyzDQLGvX7NaFbiFY44WpsW4="
        crossorigin="anonymous"
    ></script>
    <script src="https://cdn.jsdelivr.net/npm/tinymce@7.1.2/tinymce.min.js" 
        integrity="sha256-5otrbbqtAS5IUAoXLf399RoDftSWtzsS3CyCreLcOhs="
        crossorigin="anonymous"
    ></script>

    <script nonce="{{ app.request.attributes.get('csp_script_nonce') }}">
        tinymce.init({
            selector: 'textarea.editor',
            browser_spellcheck: true,
            license_key: 'gpl',
            plugins: 'lists',
            toolbar: 'undo redo | styleselect | bold italic | numlist bullist | mybutton',
            menubar: false,
            height: 320,
            {% if 'back_' in app.request.get('_route') %}
            setup: function (editor) {
                editor.on('input', function (e) {
                    if (editor.formElement.classList.contains('tinyCheck')) {
                        let isOk = true,
                            submitters = document.querySelectorAll('button[form="' + editor.formElement.id + '"]')
                        isOk = editor.getContent().length <= 17;
                        !isOk && document.querySelector('#' + editor.id).parentElement.classList.add('fr-input-group--error'), document.querySelector('#' + editor.id).parentElement.querySelector('.fr-error-text').classList.remove('fr-hidden');
                        submitters.forEach(sbmt => {
                            sbmt.disabled = isOk;
                        })
                        if (isOk !== true)
                            document.querySelector('#' + editor.id).parentElement.classList.remove('fr-input-group--error'), document.querySelector('#' + editor.id).parentElement.querySelector('.fr-error-text').classList.add('fr-hidden');
                    }
                });
                {% if 'back_signalement_view' in app.request.get('_route') %}
                editor.ui.registry.addMenuButton('mybutton', {
                    text: 'Partager un document',
                    fetch: function (callback) {
                        let items = [
                            {% for doc in signalement.files|filter(doc => doc.fileType == 'document') %}
                            {
                                type: 'menuitem',
                                text: '{{ doc.title }}',
                                onAction: function () {
                                    editor.insertContent('&nbsp;<a href="{{ asset('_up/'~doc.filename) }}?t=___TOKEN___" class="fr-btn fr-fi-eye-fill fr-btn--icon-left" title="Afficher le document" target="_blank" rel="noopener">Consulter "{{ doc.title }}"</a>');
                                }
                            },
                            {% endfor %}
                        ];
                
                        {% if can_see_nde_edit_zone(signalementQualificationNDE) and is_granted('USER_SEE_NDE', app.user) and files is defined and files.documents is defined %}  
                        {% for doc in files.documents %}
                                {% if enum('App\\Entity\\Enum\\Qualification').NON_DECENCE_ENERGETIQUE.name in doc.params.qualification|joinEnumKeys(',') %}
                                    items.push({
                                        type: 'menuitem',
                                        text: "{{ doc.title|raw }}",
                                        onAction: function () {
                                            editor.insertContent('&nbsp;<a href="{{ asset(files.path~doc.file) }}" class="fr-link" title="Afficher le document" target="_blank" rel="noopener">Consulter "{{ doc.title }}"</a></br>');
                                        }
                                    })     
                                {% endif %}   
                            {% endfor %}
                        {% endif %}
                        callback(items);
                    }
                });
                {% endif %}
            }
            {% endif %}
        });
    </script>

    <script nonce="{{ app.request.attributes.get('csp_script_nonce') }}">
        tippy('.part-infos-hover', {
            content: (reference) => '<strong class="fr-ws-nowrap">' + reference.getAttribute('data-user') + '</strong>' + '<hr class="fr-pb-1v"><span class="fr-ws-nowrap">' + reference.getAttribute('data-mail') + '</span>',
            allowHTML: true,
            interactive: true,
            hideOnClick: true,
            theme: 'light-border',
            arrow: true,
            placement: "bottom",
            maxWidth: "100%"
        });
        tippy('#tags_select_tooltip_btn', {
            content: (reference) => {
                let template = document.querySelector('template#tags_tooltip_template');
                let newEl = document.importNode(template.content, true);
                newEl.querySelectorAll('[data-tag-add]').forEach(el => {
                    el.addEventListener('click', addTagEvent)
                });
                newEl.querySelector('form[name="new-tag-form"]')?.addEventListener('submit', (event) => {
                    event.preventDefault();
                    let form = event.target;
                    let data = new FormData(form);
                    fetch(form.getAttribute('action'), {
                        method: 'POST',
                        body: data
                    }).then(r => {
                        r.json().then(res => {
                            form.reset();
                            let container = document.querySelector(`#tags_inactive_container`);
                            let template = document.querySelector(`template#tag_template`).content;
                            let tag = template.querySelector('span:first-child').cloneNode(true);
                            tag.setAttribute('data-value', res.tag.id);
                            tag.innerHTML = res.tag.label + '&nbsp;&nbsp;';
                            let deleter = document.createElement('span');

                            deleter.classList.add('fr-fi-delete-line', 'fr-mt-2v', 'fr-text-label--red-marianne', 'fr-icon--sm')
                            deleter.addEventListener('click', persistRemoveTagEvent);
                            tag.appendChild(deleter);
                            tag.addEventListener('click', addTagEvent);
                            container.appendChild(tag);
                        });
                    }).catch(e => {
                    });
                });
                newEl?.querySelectorAll('span.tag--deleter')?.forEach(tagDeleter => {
                    tagDeleter.addEventListener('click', persistRemoveTagEvent);
                });
                return newEl;
            },
            trigger: 'click',
            hideOnClick: 'toggle',
            allowHTML: true,
            interactive: true,
            theme: 'light-border',
            placement: "left",
            maxWidth: "500px",
            arrow: false,
        })
        
        {% if isClosedForMe or signalement.statut is same as constant('App\\Entity\\Signalement::STATUS_CLOSED') %}
        document?.querySelector('#signalement-{{ signalement.id }}-content').querySelectorAll('button:not(.reopen,.reaffect,.img-box,.fr-accordion__btn,.keep-when-signalement-closed),.fr-btn:not(.reopen,.reaffect,.img-box,.fr-fi-file-pdf-fill,.keep-when-signalement-closed)').forEach(input => {
            input.remove()
        })
        {% endif %}
    </script>
{% endblock %}

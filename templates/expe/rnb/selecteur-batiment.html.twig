<!DOCTYPE html>
<html lang="fr">
	<head>
		<meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
		<title>Test sélecteur batiment RNB</title>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" crossorigin=""/>
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
		<script src="https://unpkg.com/leaflet.vectorgrid@latest/dist/Leaflet.VectorGrid.bundled.js"></script>
	</head>
	<body>
		<div style="width:70%;float:left;">
			<div id="map" style="height: 80vh;"></div>
		</div>
		<div style="width:28%;float:right;" id="data">
			<input type="text" id="search" placeholder="Rechercher une adresse" style="width:100%;">
			<div id="ban"></div>
			<pre></pre>
		</div>
        <script>
			
			var map = L.map('map').setView([44.05296, 4.14382], 18);
			L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    			maxZoom: 19,
    			attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
			}).addTo(map);

			// Patch pour rendre les couches vectorielles interactives : https://github.com/Leaflet/Leaflet.VectorGrid/issues/274#issuecomment-1371640331
			L.Canvas.Tile.include({
				_onClick: function (e) {
					var point = this._map.mouseEventToLayerPoint(e).subtract(this.getOffset());
					var layer = L.Layer;
					var clickedLayer = L.Layer;

					for (var id in this._layers) {
						layer = this._layers[id];
						if (
							layer.options.interactive &&
							layer._containsPoint(point) &&
							!this._map._draggableMoved(layer)
						) {
							clickedLayer = layer;
						}
					}
					if (clickedLayer) {
									// offending code used to be right here
						clickedLayer.fireEvent(e.type, undefined, true);
					}
				},
			});
			// Fin du patch
			var clickedStyle = {
				radius: 5,
				fillColor: '#31e060',
				color: '#ffffff',
				weight: 3,
				fill: true,
				fillOpacity: 1,
				opacity: 1
			};

			var initialStyle = {
				radius: 5,
				fillColor: '#1452e3',
				color: '#ffffff',
				weight: 3,
				fill: true,
				fillOpacity: 1,
				opacity: 1
			};

			var vectorTileOptions = {
				rendererFactory: L.canvas.tile,
				vectorTileLayerStyles: {
					'default': initialStyle
				},
				interactive: true,  // Activez ceci si vous voulez que les couches soient interactives
				getFeatureId: function(f) {
					return f.properties.rnb_id;
				}
			};

			var vectorTileLayer = L.vectorGrid.protobuf('https://rnb-api.beta.gouv.fr/api/alpha/tiles/{x}/{y}/{z}.pbf', vectorTileOptions);

			vectorTileLayer.addTo(map);

			var previousId;
			vectorTileLayer.on('click', async function(e) {
				var properties = e.layer.properties;
				var rnb_id = properties.rnb_id;

    			// Si un élément a été cliqué précédemment, réinitialisez son style
				if (previousId !== undefined) {
					vectorTileLayer.setFeatureStyle(previousId, initialStyle);
				}
				vectorTileLayer.setFeatureStyle(rnb_id, clickedStyle);
				previousId = rnb_id;

				const rnbURL = new URL("https://rnb-api.beta.gouv.fr/api/alpha/buildings/" + rnb_id + "/");
				const response = await fetch(rnbURL);

				if (response.status == 200) {
					const json = await response.json();
					const data = JSON.stringify(json, null, 2);
  					document.querySelector("#data pre").innerHTML = data;
				} else {
					// Gestion des erreurs éventuelles lors de l'interrogation de l'API du RNB (500, 404, ...)
				}
			});

			// Recherche d'adresse
			const apiAdresse = 'https://api-adresse.data.gouv.fr/search/?q='
			var inputAdresse = document.getElementById('search');
			var listAdresses = document.getElementById('ban');
			inputAdresse.addEventListener('input', (e) => {
				let adresse = e.target.value
				if (adresse.length > 3) {
					let query = apiAdresse + adresse
					fetch(query)
						.then(response => response.json())
						.then(json => {
							listAdresses.innerHTML = ''
							json.features.forEach((feature) => {
								console.log(feature)
								let suggestion = document.createElement('div')
								suggestion.innerHTML = feature.properties.label
								attachAddressSuggestionEvent(suggestion, feature)
								listAdresses.appendChild(suggestion)
							})
						})
				}
			})

			function attachAddressSuggestionEvent(suggestion, feature) {
				suggestion.addEventListener('click', (e) => {
					map.setView([feature.geometry.coordinates[1], feature.geometry.coordinates[0]], 20)
				})
			}

		</script>
	</body>
</html>
